
++++++++++++++++++++++++++++++++
Image Layers
++++++++++++++++++++++++++++++++
    1. Each instruction in a Dockerfile roughly translates to an image layer.
    2. Each Instructions in the dockerfile is cached.
    3. When you run a build, the builder attempts to reuse layers from earlier builds
    4. When no changes is done and the image is rebuild --> build it from the chached image Layers
    5. If change occurs in particular layer.. the subsequent bellow layers are re-run
    
    
    
============================================
Docker cmd/container modes -- run vs start
============================================

Default:
    run   --> cmd in attached mode (Foreground)
    start --> cmd in detached mode (Background)



VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
Docker Volumes  - Anonymous vs named
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV

    FileSystem is Managed by Docker inside the host.

    ANONYMOUS:

        1. VOLUME [path] - in dockerfile creates anonymous volumes
        2. They are deleted when the container is run with --rm flag
        3. every when a container is run newly it create new anonymous volumes(not useful)
    
    NAMED:

        1. -v <volume_name:path_inside_container> is usefull to create Named Volumes
        2. These are not deleted when the container is removed even with --rm



BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB
DOCKER  Volumes - BIND MOUNT
BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB

    1. A file or directory on the host machine is mounted into a container
    2. Using -v with Absolute path (-v 'abs_path:path_inside_container')
    3. As a user we have the control over the host's filesystem which is being mounted.



RRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRR
DOCKER Volumes - Read-only
RRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRR

    usage : <named_volume1:path_inside_container:ro> (read-only)

    -- You can simultaneously mount a single volume as read-write for some containers and as read-only for others



DIDIDIDIDIDIDIDIDIDIDIDIDIDIDIDIDIDIDIDIDDIDIDIDIDIDIDID
Docker Ignore file  (.dockerignore)
DIDIDIDIDIDIDIDIDIDIDIDIDIDIDIDIDIDIDIDIDDIDIDIDIDIDIDID

    --Similar to .gitignore.
    --while COPY, we can ignore some files/folder being copied into images.



NNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN
Networks
NNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN

NOTE : Unlike volumes, Networks need to be created before using it!

How docker resolves the ip:
- Docker does NOT REPLACE the source code.
- It detects OUTGOING REQUESTS and resolves the ip for such requests

1. container <--> WWW        --> No config required, works by default
2. container <--> Localhost  --> "host.docker.internal"
3. container <--> container  --> use container_name  has REFERENCE (network containers)
                                 (or) conatiner_ipAddress (in app code without using docker Networks)

            NETWORK
|-----------------------------------|
|node app |    mongo db             |
|---------|-------------------------|   
    |                   |                      
    V                   V
container 1        container 2

eg. 
2.http://host.docker.internal:3000/favourites --> instead of http://localhost:3000...
3.mongodb://<mongoContainer_name>/..paths


DDDDDDDDDDDDDDDDDDDDDD
NETWORK - "Drivers"
DDDDDDDDDDDDDDDDDDDDDD

DEFAULT : bridge - i.e. Containers can find each other by name if they are in the same Network

1. host     -  For standalone containers, isolation between container and host system is removed (i.e. they share localhost as a network)
2. overlay  - Multiple Docker daemons (i.e. Docker running on different machines) are able to connect with each other. Only works in "Swarm" mode which is a dated / almost deprecated way of connecting multiple containers
3. macvlan  - You can set a custom MAC address to a container - this address can then be used for communication with that container
4. none     - All networking is disabled.
5. Third-party plugins



UUUUUUUUUUUUUUUUUUUUUUUUUUU
UTILITY - Containers
UUUUUUUUUUUUUUUUUUUUUUUUUUU

