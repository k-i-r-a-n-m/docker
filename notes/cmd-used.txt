

=======================
Cmd's used
=======================

1.docker build <path_to_dockerfile>
 --> --tag <name:tag> = naming/tagging a image

2.docker ps  -> get all the "running" containers (ps-process status)
    -a,-all --> get all containers (both running & stoped)

3.docker stop <docker-container-name>

4. docker run <image> <cmds_overriding_default_cmd_of_image's>
    --> run's the container with specified image
    --> "docker  run [OPTIONS] IMAGE [COMMAND] [ARG...]" (order matters)**
    --> -it (provides interactive terminal) -i (interact with STDIN) -t (Opens up the pseudo-TTY - ie.terminal)
    --> -p <local_port:container_port> ..n(port mapping) <image_to_run> = Publish the containers port
             --> (eg) .docker run -p 4000:80 -p 5555:80 13a87e2451366fa7dcfa
    -->   -d = to run container in detached mode
    --> --rm = Automatically remove the container when stoped
    --> --name = naming a container
    --> -v = create NAMED/ANONYMUS volumes <volume_name:path_inside_container>
            --> (eg) -v feedback:/app/feedback
            --> READ-ONLY-VOLUME = (eg) feedback:/app/feedback:ro

    --> --env, -e <env.variable=VALUE>  = Creates a Environment variable at "runtime"
            --> (eg) PORT=8000 

    --> --env-file <env_file_path>      = Creates a Environment Variables using (.env) file
            --> (eg) --env-file ./.env  (at root)

    --> --build-arg <argument_variable=VALUE> = Creates a Argument variable at "Buildtime"
            --> (eg) DEFAULT_PORT=8000 

    --> --network <NETWORK_NAME> = Connect a container to a network
    

                                             
5. docker start <container_name> 
    --> restarts a container
    --> -a = to run container in attached mode
    --> -i = restarts the container in interactive mode (listen for STDIN)


6. docker attach <container_name>
    --> attach to a detached container


7. docker logs <container_name>
    --> gets "all" the logs (includes previous logs also)
    --> -f, --follow  = Follow log output (used to attach to the container, when the container is running in detached mode)


8. docker rm <container_name_1 container_name_2 ...container_name_N>
    --> remove the container


9. docker rmi <image_ID ...n>
    --> remove the image 
    --> before removing all the containers(running/stoped) must be removed


10. docker images 
    --> list all the images


11. docker image prune
    --> Remove all dangling images
    --> -a = also remove all images not referenced by any container.


12. docker container prune
    --> Removes all stopped containers.


13. docker inspect <image/container[name/id]>
    --> inspect the docker object for images & containers


14. docker cp [OPTIONS] CONTAINER:SRC_PATH DEST_PATH 
    docker cp [OPTIONS] SRC_PATH CONTAINER:DEST_PATH

    --> Coppy files to and from containers and local_machine

   

15. docker tag <oldImageName:tag> <newImageName:tag>
    --> used to rename/re-tag an existing image


16. docker login
17. docker logout

18. docker push <remote_repo/image_name:tag> (eg. k1r4nm/appImage:v1)
19. docker pull <remote_repo/image_name:tag>


20. docker volume 
    --> ls    = list the volumes both anonymous/named
    --> prune = remove un-used anonymous volumes
    --> rm    = remove 1 or more volume

21. docker network 
    --> connect     add a running container to a network 
    --> create      Create a network
    --> disconnect  Disconnect a container from a network
    --> inspect     Display detailed information on one or more networks
    --> ls          List networks
    --> prune       Remove all unused networks
    --> rm          Remove one or more networks


22. docker exec <running_continer_name> <cmd_to_run_inside_container>
    --> -it = run command in interactive mode



shortcut-  for getting absolute path
=====================================
macOS / Linux: -v $(pwd):/app
Windows: -v "%cd%":/app 